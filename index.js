require('dotenv').config();
const { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard, session } = require('grammy');
const fs = require('fs').promises;
const sqlite3 = require('sqlite3').verbose();
const { open } = require('sqlite');
const { format } = require('date-fns');
const { ru } = require('date-fns/locale'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bot.use(session({
  initial: () => ({
    correctAnswers: {
      html: 0,
      css: 0,
      js: 0,
      react: 0
    },
    hasStartedRatingMode: false
  })
}));

let questionsData = {};
let db;

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ø–∞–º—è—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async function loadQuestions() {
  const categories = {
    html: 'html_questions.json',
    css: 'css_questions.json',
    js: 'js_questions.json',
    react: 'react_questions.json'
  };
  for (const [category, file] of Object.entries(categories)) {
    try {
      const data = await fs.readFile(`questions/${file}`, 'utf8');
      questionsData[category] = JSON.parse(data).questions;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ ${file}:`, error);
    }
  }
}

async function initDatabase() {
  db = await open({
    filename: 'leaderboard.db',
    driver: sqlite3.Database
  });

  await db.exec(`
    CREATE TABLE IF NOT EXISTS leaderboard (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      username TEXT NOT NULL,
      score INTEGER NOT NULL,
      last_played TEXT NOT NULL
    )
  `);
}

async function createProfile(username) {
  const existingEntry = await db.get('SELECT * FROM leaderboard WHERE username = ?', username);
  if (!existingEntry) {
    await db.run('INSERT INTO leaderboard (username, score, last_played) VALUES (?, ?, ?)', username, 0, '–ï—â–µ –Ω–µ –∏–≥—Ä–∞–ª');
  }
}

async function updateLeaderboard(username, score) {
  const now = new Date().toISOString();
  const existingEntry = await db.get('SELECT * FROM leaderboard WHERE username = ?', username);
  if (existingEntry) {
    if (existingEntry.score < score) {
      await db.run('UPDATE leaderboard SET score = ?, last_played = ? WHERE username = ?', score, now, username);
    } else {
      await db.run('UPDATE leaderboard SET last_played = ? WHERE username = ?', now, username);
    }
  } else {
    await db.run('INSERT INTO leaderboard (username, score, last_played) VALUES (?, ?, ?)', username, score, now);
  }
}

async function getLeaderboard() {
  return await db.all('SELECT username, score FROM leaderboard ORDER BY score DESC LIMIT 10');
}

function initializeQuizState(ctx, category) {
  if (!ctx.session.askedQuestions) {
    ctx.session.askedQuestions = {};
  }
  if (!ctx.session.askedQuestions[category]) {
    ctx.session.askedQuestions[category] = [];
  }
}

function initializeRatingMode(ctx) {
  ctx.session.ratingMode = true;
  ctx.session.score = 0;
  ctx.session.askedQuestions = {};
  ctx.session.currentCategory = null;
}

function getStartKeyboard() {
  return new Keyboard()
    .text('HTML')
    .text('CSS')
    .row()
    .text('JavaScript')
    .text('React')
    .row()
    .text('üèÜ–†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π —Ä–µ–∂–∏–º')
    .row()
    .text('üì£–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤')
    .row();
}

bot.command('start', async (ctx) => {
  const username = ctx.from.username || ctx.from.first_name;
  await createProfile(username);

  const startKeyboard = getStartKeyboard();

  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:\n' +
    '/start - –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n' +
    '/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è',
    { reply_markup: startKeyboard }
  );
  await ctx.reply('–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º? –í—ã–±–∏—Ä–∞–π —Ç–µ–º—Éüëá', {
    reply_markup: startKeyboard,
  });
});

bot.command('profile', async (ctx) => {
  const username = ctx.from.username || ctx.from.first_name;
  const result = await db.get('SELECT * FROM leaderboard WHERE username = ?', username);

  const htmlQuestionsTotal = questionsData.html.length;
  const cssQuestionsTotal = questionsData.css.length;
  const jsQuestionsTotal = questionsData.js.length;
  const reactQuestionsTotal = questionsData.react.length;

  const htmlCorrect = ctx.session.correctAnswers.html;
  const cssCorrect = ctx.session.correctAnswers.css;
  const jsCorrect = ctx.session.correctAnswers.js;
  const reactCorrect = ctx.session.correctAnswers.react;

  if (result) {
    const formattedDate = result.last_played === '–ï—â–µ –Ω–µ –∏–≥—Ä–∞–ª' ? result.last_played : format(new Date(result.last_played), 'dd MMMM yyyy, HH:mm', { locale: ru });
    const profileMessage = `üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}:\n` +
      `üèÜ –°—á–µ—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π –∏–≥—Ä–µ: ${result.score} –æ—á–∫–æ–≤\n` +
      `üìÖ –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã: ${formattedDate}\n` +
      `üìö –í–æ–ø—Ä–æ—Å—ã –ø–æ HTML: —Ä–µ—à–µ–Ω–æ –≤–µ—Ä–Ω–æ ${htmlCorrect} –∏–∑ ${htmlQuestionsTotal}\n` +
      `üìö –í–æ–ø—Ä–æ—Å—ã –ø–æ CSS: —Ä–µ—à–µ–Ω–æ –≤–µ—Ä–Ω–æ ${cssCorrect} –∏–∑ ${cssQuestionsTotal}\n` +
      `üìö –í–æ–ø—Ä–æ—Å—ã –ø–æ JavaScript: —Ä–µ—à–µ–Ω–æ –≤–µ—Ä–Ω–æ ${jsCorrect} –∏–∑ ${jsQuestionsTotal}\n` +
      `üìö –í–æ–ø—Ä–æ—Å—ã –ø–æ React: —Ä–µ—à–µ–Ω–æ –≤–µ—Ä–Ω–æ ${reactCorrect} –∏–∑ ${reactQuestionsTotal}`;

    await ctx.reply(profileMessage);
  } else {
    await ctx.reply('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –≤ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.');
  }
});

bot.on('message', async (ctx) => {
  const { text } = ctx.message;
  if (text === '–ù–∞–∑–∞–¥ ‚Ü©Ô∏è') {
    const startKeyboard = getStartKeyboard();

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
      reply_markup: startKeyboard,
    });
  } else {
    switch (text) {
      case 'HTML':
        await startQuiz(ctx, 'html');
        break;
      case 'CSS':
        await startQuiz(ctx, 'css');
        break;
      case 'JavaScript':
        await startQuiz(ctx, 'js');
        break;
      case 'React':
        await startQuiz(ctx, 'react');
        break;
      case 'üèÜ–†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π —Ä–µ–∂–∏–º':
        if (!ctx.session.hasStartedRatingMode) {
          ctx.session.hasStartedRatingMode = true;
          await ctx.reply(
            '–†–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π —Ä–µ–∂–∏–º —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–∞–µ—Ç—Å—è –±–∞–ª–ª, –∞ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –∏–≥—Ä–∞ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è. –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.'
          );
        }
        initializeRatingMode(ctx);
        await startRatingQuiz(ctx);
        break;
      case 'üì£–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤':
        await showLeaderboard(ctx);
        break;
      default:
        handleQuizAnswer(ctx, text);
    }
  }
});

async function handleQuizAnswer(ctx, answer) {
  try {
    if (!ctx.session.currentQuestion) {
      await ctx.reply('–ö–∞–∂–µ—Ç—Å—è, —è –∑–∞–±—ã–ª –≤–æ–ø—Ä–æ—Å. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.');
      return;
    }

    const correctAnswer = ctx.session.currentQuestion.options[ctx.session.currentQuestion.correctOption];

    if (answer === correctAnswer) {
      await ctx.reply('–í–µ—Ä–Ω–æ!');
      ctx.session.correctAnswers[ctx.session.currentCategory]++;
      if (ctx.session.ratingMode) {
        ctx.session.score += 1;
        await startRatingQuiz(ctx);
      } else {
        await startQuiz(ctx, ctx.session.currentCategory);
      }
    } else {
      if (ctx.session.ratingMode) {
        const username = ctx.from.username || ctx.from.first_name;
        await updateLeaderboard(username, ctx.session.score);
        ctx.session.ratingMode = false; // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–π —Ä–µ–∂–∏–º
        const startKeyboard = getStartKeyboard();
        await ctx.reply(`–û—à–∏–±–∫–∞! –í—ã –Ω–∞–±—Ä–∞–ª–∏ ${ctx.session.score} –æ—á–∫–æ–≤.`, {
          reply_markup: startKeyboard,
        });
        ctx.session.score = 0;
      } else {
        await ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
}

function getRandomQuestion(questions, asked) {
  const availableQuestions = questions.filter((_, index) => !asked.includes(index));
  if (availableQuestions.length === 0) {
    return null; // –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±—ã–ª–∏ –∑–∞–¥–∞–Ω—ã
  }
  const randomIndex = Math.floor(Math.random() * availableQuestions.length);
  return availableQuestions[randomIndex];
}

async function startQuiz(ctx, category) {
  initializeQuizState(ctx, category);

  const questions = questionsData[category];
  if (!questions) {
    await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.toUpperCase()}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª: questions/${category}_questions.json`);
    return;
  }

  const questionData = getRandomQuestion(questions, ctx.session.askedQuestions[category]);
  if (!questionData) {
    const startKeyboard = getStartKeyboard();
    await ctx.reply(`–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ ${category.toUpperCase()}!`, {
      reply_markup: startKeyboard,
    });
    return;
  }

  const questionIndex = questions.indexOf(questionData);
  ctx.session.askedQuestions[category].push(questionIndex);
  ctx.session.currentQuestion = questionData;
  ctx.session.currentCategory = category;

  const keyboard = new Keyboard();
  questionData.options.forEach(option => keyboard.text(option).row());
  keyboard.text('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è').row();

  await ctx.reply(questionData.question, { reply_markup: keyboard });
}

async function startRatingQuiz(ctx) {
  const categories = ['html', 'css', 'js', 'react'];
  const randomCategory = categories[Math.floor(Math.random() * categories.length)];

  initializeQuizState(ctx, randomCategory);

  const questions = questionsData[randomCategory];
  if (!questions) {
    await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${randomCategory.toUpperCase()}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª: questions/${randomCategory}_questions.json`);
    return;
  }

  const questionData = getRandomQuestion(questions, ctx.session.askedQuestions[randomCategory]);
  if (!questionData) {
    await ctx.reply(`–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ ${randomCategory.toUpperCase()}!`);
    return;
  }

  const questionIndex = questions.indexOf(questionData);
  ctx.session.askedQuestions[randomCategory].push(questionIndex);
  ctx.session.currentQuestion = questionData;
  ctx.session.currentCategory = randomCategory;

  const keyboard = new Keyboard();
  questionData.options.forEach(option => keyboard.text(option).row());
  keyboard.text('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è').row();

  await ctx.reply(questionData.question, { reply_markup: keyboard });
}

async function showLeaderboard(ctx) {
  const topPlayers = await getLeaderboard();
  if (topPlayers.length === 0) {
    await ctx.reply('–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.');
    return;
  }

  let leaderboardMessage = '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n';
  topPlayers.forEach(({ username, score }, index) => {
    leaderboardMessage += `${index + 1}. ${username}: ${score} –æ—á–∫–æ–≤\n`;
  });

  await ctx.reply(leaderboardMessage);
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥
bot.api.setMyCommands([
  { command: 'start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞' },
  { command: 'profile', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è' }
]);

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
(async () => {
  await loadQuestions();
  await initDatabase();
  bot.start();
})();
