require('dotenv').config();
const { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard, session } = require('grammy');
const fs = require('fs').promises;

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bot.use(session({
  initial: () => ({})
}));

bot.command('start', async (ctx) => {
  const startKeyboard = new Keyboard()
    .text('HTML')
    .text('CSS')
    .row()
    .text('JavaScript')
    .text('React')
    .row();

  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é.'
  );
  await ctx.reply('–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º? –í—ã–±–∏—Ä–∞–π —Ç–µ–º—Éüëá', {
    reply_markup: startKeyboard,
  });
});

bot.on('message', async (ctx) => {
  const { text } = ctx.message;
  switch (text) {
    case 'HTML':
      await startHTMLQuiz(ctx);
      break;
    case 'CSS':
      await startCSSQuiz(ctx);
      break;
    default:
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
      handleQuizAnswer(ctx, text);
  }
});

async function handleQuizAnswer(ctx, answer) {
  try {
    if (!ctx.session.currentQuestion) {
      await ctx.reply('–ö–∞–∂–µ—Ç—Å—è, —è –∑–∞–±—ã–ª –≤–æ–ø—Ä–æ—Å. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.');
      return;
    }

    const correctAnswer = ctx.session.currentQuestion.options[ctx.session.currentQuestion.correctOption];

    if (answer === correctAnswer) {
      await ctx.reply('–í–µ—Ä–Ω–æ!');
      // –í—ã–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (ctx.session.currentCategory === 'HTML') {
        await startHTMLQuiz(ctx);
      } else if (ctx.session.currentCategory === 'CSS') {
        await startCSSQuiz(ctx);
      }
    } else {
      await ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
}



async function startHTMLQuiz(ctx) {
  try {
    const data = await fs.readFile('questions/html_questions.json', 'utf8');
    const { questions } = JSON.parse(data);
    const randomIndex = Math.floor(Math.random() * questions.length);
    const questionData = questions[randomIndex];

    ctx.session.currentQuestion = questionData;
    ctx.session.currentCategory = 'HTML'; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é

    const keyboard = new Keyboard();
    questionData.options.forEach(option => keyboard.text(option).row());

    await ctx.reply(questionData.question, { reply_markup: keyboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
}

async function startCSSQuiz(ctx) {
  try {
    const data = await fs.readFile('questions/css_questions.json', 'utf8');
    const { questions } = JSON.parse(data);
    const randomIndex = Math.floor(Math.random() * questions.length);
    const questionData = questions[randomIndex];

    ctx.session.currentQuestion = questionData;
    ctx.session.currentCategory = 'CSS'; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é

    const keyboard = new Keyboard();
    questionData.options.forEach(option => keyboard.text(option).row());

    await ctx.reply(questionData.question, { reply_markup: keyboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
}



// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();